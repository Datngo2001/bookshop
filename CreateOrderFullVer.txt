package com.paypal.business.CaptureIntent;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.paypal.business.PayPalClient;
//import com.braintreepayments.http.HttpResponse;
import com.paypal.http.*;
import com.paypal.orders.AddressPortable;
import com.paypal.orders.AmountBreakdown;
import com.paypal.orders.AmountWithBreakdown;
import com.paypal.orders.ApplicationContext;
import com.paypal.orders.Item;
import com.paypal.orders.LinkDescription;
import com.paypal.orders.Money;
import com.paypal.orders.Name;
import com.paypal.orders.Order;
import com.paypal.orders.OrderRequest;
import com.paypal.orders.OrdersCreateRequest;
import com.paypal.orders.PurchaseUnitRequest;
import com.paypal.orders.ShippingDetail;
import com.google.gson.Gson;
// DTO
import com.paypal.DTOs.CreateOrder.*;

public class CreateOrder extends PayPalClient {
  public HttpResponse<Order> createOrder(CreateOrderDto createDto, boolean debug) throws IOException {
    OrdersCreateRequest request = new OrdersCreateRequest();
    request.prefer("return=representation");
    request.requestBody(buildRequestBody(createDto));
    // 3. Call PayPal to set up a transaction
    HttpResponse<Order> response = client().execute(request);
    if (debug) {
      if (response.statusCode() == 201) {
        System.out.println("Status Code: " + response.statusCode());
        System.out.println("Status: " + response.result().status());
        System.out.println("Order ID: " + response.result().id());
        System.out.println("Intent: " + response.result().checkoutPaymentIntent());
        System.out.println("Links: ");
        for (LinkDescription link : response.result().links()) {
          System.out.println("\t" + link.rel() + ": " + link.href() + "\tCall Type: " + link.method());
        }
        System.out
            .println("Total Amount: " + response.result().purchaseUnits().get(0).amountWithBreakdown().currencyCode()
                + " " + response.result().purchaseUnits().get(0).amountWithBreakdown().value());
      }
    }
    return response;
  }

  private OrderRequest buildRequestBody(CreateOrderDto createDto) {

    OrderRequest orderRequest = new OrderRequest();

    // Tranfer data to orderRequest
    orderRequest.checkoutPaymentIntent(createDto.intent);
    orderRequest.applicationContext(tranferAppContext(createDto));
    orderRequest.purchaseUnits(tranferPurchaseUnits(createDto));
    return orderRequest;
  }

  private ApplicationContext tranferAppContext(CreateOrderDto createDto) {
    return new ApplicationContext().brandName(createDto.application_context.brand_name)
        .landingPage(createDto.application_context.landing_page)
        .shippingPreference(createDto.application_context.shipping_preference);
  }

  private List<PurchaseUnitRequest> tranferPurchaseUnits(CreateOrderDto createDto) {
    if (createDto.purchase_units == null || createDto.purchase_units.size() < 1)
      return new ArrayList<PurchaseUnitRequest>();

    List<PurchaseUnitRequest> purchaseUnitRequests = new ArrayList<PurchaseUnitRequest>();
    for (PurchaseUnit purchaseUnit : createDto.purchase_units) {
      PurchaseUnitRequest purchaseUnitRequest = new PurchaseUnitRequest().referenceId(purchaseUnit.reference_id)
          .description(purchaseUnit.description).customId(purchaseUnit.custom_id)
          .softDescriptor(purchaseUnit.soft_descriptor).amountWithBreakdown(tranferAmountWithBreakDown(purchaseUnit))
          .items(tranferItemList(purchaseUnit)).shippingDetail(tranferShippingDetail(purchaseUnit));
      purchaseUnitRequests.add(purchaseUnitRequest);
    }
    return purchaseUnitRequests;
  }

  private ArrayList<Item> tranferItemList(PurchaseUnit purchaseUnit) {
    if (purchaseUnit.items == null || purchaseUnit.items.size() < 1)
      return new ArrayList<Item>();

    ArrayList<Item> rs = new ArrayList<Item>();
    for (com.paypal.DTOs.CreateOrder.Item item : purchaseUnit.items) {
      rs.add(new Item().name(item.name).description(item.description).sku(item.sku)
          .unitAmount(new Money().currencyCode(item.unit_amount.currency_code).value(item.unit_amount.value))
          .tax(new Money().currencyCode(item.tax.currency_code).value(item.tax.value)).quantity(item.quantity)
          .category(item.category));
    }
    return rs;
  }

  private ShippingDetail tranferShippingDetail(PurchaseUnit purchaseUnit) {
    return new ShippingDetail().name(new Name().fullName(purchaseUnit.shipping.address.name.full_name))
        .addressPortable(new AddressPortable().addressLine1(purchaseUnit.shipping.address.address_line_1)
            .addressLine2(purchaseUnit.shipping.address.address_line_2)
            .adminArea2(purchaseUnit.shipping.address.admin_area_2)
            .adminArea1(purchaseUnit.shipping.address.admin_area_1)
            .postalCode(purchaseUnit.shipping.address.postal_code)
            .countryCode(purchaseUnit.shipping.address.country_code));
  }

  private AmountWithBreakdown tranferAmountWithBreakDown(PurchaseUnit purchaseUnit) {
    return new AmountWithBreakdown().currencyCode(purchaseUnit.amount.currency_code).value(purchaseUnit.amount.value)
        .amountBreakdown(new AmountBreakdown()
            .itemTotal(new Money().currencyCode(purchaseUnit.amount.breakdown.item_total.currency_code)
                .value(purchaseUnit.amount.breakdown.item_total.value))
            .shipping(new Money().currencyCode(purchaseUnit.amount.breakdown.shipping.currency_code)
                .value(purchaseUnit.amount.breakdown.shipping.value))
            .handling(new Money().currencyCode(purchaseUnit.amount.breakdown.handling.currency_code)
                .value(purchaseUnit.amount.breakdown.handling.value))
            .taxTotal(new Money().currencyCode(purchaseUnit.amount.breakdown.tax_total.currency_code)
                .value(purchaseUnit.amount.breakdown.tax_total.value))
            .shippingDiscount(new Money().currencyCode(purchaseUnit.amount.breakdown.shipping_discount.currency_code)
                .value(purchaseUnit.amount.breakdown.shipping_discount.value)));
  }
  
  
  
  
  
  
  
  
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
        <meta name="description" content="">
        <meta name="author" content="">

  <!-- Custom fonts for this template-->
  <link href="https://ngocthien2306.github.io/Admin-Site/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
  <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">

  <!-- Custom styles for this template-->
  <link href="https://ngocthien2306.github.io/Admin-Site/css/sb-admin-2.min.css" rel="stylesheet">
        <title>Tạo mới đơn hàng</title>
        <!-- Bootstrap core CSS -->

        <!-- Custom styles for this template -->
      
        <script src="./js/jquery-1.11.3.min.js"></script>
		<c:import url="../sharedView/global.html"></c:import>
    </head>

    <body>
	
		<c:import url="../sharedView/header.jsp"></c:import>
         <div class="container">
			<div class="grid">
				<div class="grid_row">
					<div class="grid_column-8" style="margin: 0 auto;">
					           <div class="header clearfix">
            <h3 class="text-muted">VNPAY</h3>
            </div>
            <h5>Tạo mới đơn hàng</h5>
            

            <div class="table-responsive">
            
            	 <form action="confirm">
            	 <input type="hidden" name="action" value="CHECK">
            	 <input type="hidden" name="price" value="${priceTotal}">
            	 <input type="hidden" name="amount" value="${priceTotal}">
            	  <div class="form-group">
                        <label class="label-control" for="language">Mã khuyến mãi</label>
						<input type="text" class="form-control" name="promoCode" >
						<input type="submit" class=" btn btn-primary" 
						style="margin: 8px 0; width: 100px;" 
						name="" value="Kiểm tra" 
						placeholder="Sử dụng mã giảm giá để nhận được ưu đãi">
                    </div>
            </form>
                <form action="ajaxServlet" id="frmCreateOrder" method="post">        
                    <div class="form-group">
                        <label class="label-control" for="language">Loại hàng hóa </label>
                        <select name="ordertype" id="ordertype" class="form-control">
                            <option value="topup">Rental Book</option>
    
                            <option value="fashion">E-Book</option>
                            <option value="240004">Audio Book</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="amount">Số tiền (VND)</label>
                        <input class="form-control" data-val="true" data-val-number="The field Amount must be a number." data-val-required="The Amount field is required." 
                        id="amount" max="100000000" min="1" name="amount" type="number" value="${priceTotal}" readonly="readonly"/>
                    </div>

                    <div class="form-group">
                        <label class="label-control" for="OrderDescription">Nội dung thanh toán</label>
                        <textarea class="form-control" cols="20" id="vnp_OrderInfo" name="vnp_OrderInfo" rows="2">Thanh toan don hang </textarea>
                    </div>
                    <div class="form-group">
                        <label class="label-control" for="bankcode">Ngân hàng</label>
                        <select name="bankcode" id="bankcode" class="form-control">
                            <option value="">Không chọn </option>
                            <option value="VNPAYQR">VNPAYQR</option>
                            <option value="MBAPP">MBAPP</option>
                            <option value= "INTCARD">INTCARD</option>
                            <option value= "VNBANK">VNBANK</option>
                            <option value= "VNPAYEWALLET">VNPAYEWALLET</option> 
                            <option value="NCB">  	Ngan hang NCB</option>
                            <option value="SACOMBANK">Ngan hang SacomBank  </option>
                            <option value="EXIMBANK">  Ngan hang EximBank </option>
                            <option value="MSBANK"> 	Ngan hang MSBANK </option>
                            <option value="NAMABANK"> 	Ngan hang NamABank </option>
                            <option value="VISA">  	Thanh toan qua VISA/MASTER</option>
                            <option value="VNMART">  	Vi dien tu VnMart</option>
                            <option value="VIETINBANK">Ngan hang Vietinbank  </option>
                            <option value="VIETCOMBANK"> 	Ngan hang VCB </option>
                            <option value="HDBANK">Ngan hang HDBank</option>
                            <option value="DONGABANK">  	Ngan hang Dong A</option>
                            <option value="TPBANK"> 	Ngân hàng TPBank </option>
                            <option value="OJB">  	Ngân hàng OceanBank</option>
                            <option value="BIDV"> Ngân hàng BIDV </option>
                            <option value="TECHCOMBANK"> 	Ngân hàng Techcombank </option>
                            <option value="VPBANK"> 	Ngan hang VPBank </option>
                            <option value="AGRIBANK"> 	Ngan hang Agribank </option>
                            <option value="MBBANK"> 	Ngan hang MBBank </option>
                            <option value="ACB"> Ngan hang ACB </option>
                            <option value="OCB"> Ngan hang OCB </option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="label-control" for="language">Ngôn ngữ</label>
                        <select name="language" id="language" class="form-control">
                            <option value="vn">Tiếng Việt</option>
                            <option value="en">English</option>
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">Thanh toán</button>
                </form>
            </div>
					</div>
				</div>
			</div>
	
            <p>
                &nbsp;
            </p>

        </div>
		<c:import url="../sharedView/footer.jsp"></c:import>
        <link href="https://pay.vnpay.vn/lib/vnpay/vnpay.css" rel="stylesheet" />
        <script src="https://pay.vnpay.vn/lib/vnpay/vnpay.min.js"></script>
        <script type="text/javascript">
            $("#frmCreateOrder").submit(function () {
                var postData = $("#frmCreateOrder").serialize();
                var submitUrl = $("#frmCreateOrder").attr("action");
                $.ajax({
                    type: "POST",
                    url: submitUrl,
                    data: postData,
                    dataType: 'JSON',
                    success: function (x) {
                        if (x.code === '00') {
                            if (window.vnpay) {
                                vnpay.open({width: 768, height: 600, url: x.data});
                            } else {
                                location.href = x.data;
                            }
                            return false;
                        } else {
                            alert(x.Message);
                        }
                    }
                });
                return false;
            });
        </script>       
    </body>
</html>
}